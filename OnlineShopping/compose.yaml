version: '3.8'
services:
  payments-db:
    image: postgres:15
    environment:
      POSTGRES_DB: payments
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "9093:9093"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka-topics-init:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/bash", "/etc/kafka/init/kafka-init.sh"]
    volumes:
      - ./kafka-init.sh:/etc/kafka/init/kafka-init.sh

  orders-db:
    image: postgres:15
    environment:
      POSTGRES_DB: ordersdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ordersdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  orders-service:
    build:
      context: .
      dockerfile: OrdersService/Dockerfile
    depends_on:
      orders-db:
        condition: service_healthy
      kafka-topics-init:
        condition: service_completed_successfully
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8082
      ConnectionStrings__DefaultConnection: Host=orders-db;Port=5432;Database=ordersdb;Username=user;Password=password
      Kafka__BootstrapServers: kafka:9092
    ports:
      - "8082:8082"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8082/swagger || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  payments-service:
    build:
      context: .
      dockerfile: PaymentsService/Dockerfile
    depends_on:
      payments-db:
        condition: service_healthy
      kafka-topics-init:
        condition: service_completed_successfully
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__DefaultConnection: Host=payments-db;Port=5432;Database=payments;Username=postgres;Password=postgres
      Kafka__BootstrapServers: kafka:9092
      Kafka__OrderPaymentRequestTopic: order-payment-requests
    ports:
      - "8080:8080"
      - "8081:8081"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/swagger || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    depends_on:
      - orders-service
      - payments-service
    environment:
      ASPNETCORE_URLS: http://+:8000
    ports:
      - "8000:8000"